!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function n(t){return"string"==typeof t&&(t=document.querySelector(t)),t&&1===t.nodeType?t:(e=`query filed [${t}]`,console.warn(`[dChart]: ${e}`),document.createElement("div"));var e}i.r(e);const s=["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline"];function r(t,e){return t.currentStyle?t.currentStyle[e]:window.getComputedStyle(t,null)[e]}let o=0;class h{constructor(t){this.points=t.points||[],this.style=t.style||{lineWidth:1,strokeStyle:"#000"},this.needCache=t.needCache||!1,this.name=t.name||`lineid${o++}`}}const a={width:2,borderWidth:0},c={width:5,borderWidth:1};class l{constructor(t){this.x=t.x,this.y=t.y,this.height=t.height,this.fillStyle=t.fillStyle,t.width?this.width=t.width:this.width="small"===t.size?a.width:c.width,this.borderWidth="small"===t.size?a.borderWidth:c.borderWidth}}var d={createLine:function(t){return t instanceof h?t:Array.isArray(t)?new h({points:t}):new h(t)},createRect:function(t){return t instanceof l?t:new l(t)}};var f;function u(t,e,i,n){const s=e[0];t.moveTo(s.x+i,s.y+i),e.forEach(e=>{t.lineTo(e.x+i,e.y+i)}),n&&t.stroke()}function p(t,e){return-parseInt(t*e)}class y{constructor(t){this.init(t)}initContext(t){const e=this.container=n(t.el),i=document.createElement("canvas");e.append(i),this.ctx=i.getContext("2d"),i.height=parseFloat(t.height||r(e,"height")),i.width=parseFloat(t.width||r(e,"width")),i.style.height=i.height+"px",i.style.width=i.width+"px",this.canvas=i,this.canvasHeight=i.height,this.canvasWidth=i.width}initState(t){this.lineMap={},this.PIXOFFSET=.5,this.data=t.data||null,this.chartOffsetX=0}initEvent(){let t=0,e=0;this.canvas.addEventListener("mousedown",e=>{console.log(e.pageX),this.isMouseDown=!0,this.chartOffsetX=this.chartOffsetX,this.mouseDownX=t=e.pageX}),this.canvas.addEventListener("mousemove",e=>{!this.isBusy&&this.isMouseDown&&(this.isBusy=!0,e.pageX!==t&&(this.chartOffsetX+=parseInt(e.pageX-t),this.chartOffsetX>0&&(this.chartOffsetX=0),this.chartOffsetX<-this.maxOffsetX&&(this.chartOffsetX=-this.maxOffsetX),t=e.pageX,this.clearAll(),this.drawRects(this.chartOffsetX)),console.log(this.chartOffsetX,".."),this.isBusy=!1)}),this.canvas.addEventListener("mouseup",t=>{console.log(t.pageX,"up"),this.isMouseDown=!1,this.mouseUpX=e=t.pageX})}init(t){this.initContext(t),this.initState(t),this.initEvent()}}(f=y).prototype.clearAll=function(){this.ctx.clearRect(0,0,this.canvasWidth,this.canvasHeight)},f.prototype.drawLine=function(t){const e=this.ctx;t=d.createLine(t),console.log(t,"line");const i=t.style.lineWidth%2==1?this.PIXOFFSET:0;console.log(i,"PIXOFFSET"),t.isRestore&&e.restore(),t.style&&function(t,e){if(t&&e)for(let i in e)s.indexOf(i)>-1&&(t[i]=e[i])}(e,t.style),t&&t.points&&(Array.isArray(t.points[0])?(e.beginPath(),t.points.forEach(t=>{u(e,t,i)}),e.stroke()):(e.beginPath(),u(e,t.points,i,!0))),t.needCache&&!this.lineMap.hasOwnProperty(t.name)&&(this.lineMap[t.name]=t)},f.prototype.drawRect=function(t){const e=this.ctx;t=d.createRect(t),e.beginPath(),e.fillRect(t.x,t.y,t.width,t.height)},f.prototype.drawRects=function(t=0){const e=[10,20,30,40,50,60,10,20,30,40,50,60,10,20,30,40,50,60],i=function(t,e,i,n="bar"){if("bar"===n)return t/e}(.8*this.canvasHeight,Math.max.apply(null,e));let n;for(let s=0;s<e.length;s++)(n=35*s)<this.canvasWidth&&this.drawRect({x:n+t,y:this.canvasHeight-10,height:p(e[s],i),width:30});this.rectsWidth=n+30,this.maxOffsetX=Math.abs(this.canvasWidth-this.rectsWidth)+5},window.dChart=function(t){return console.count("ss"),new y(t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,